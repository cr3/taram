[tool.poetry]
name = "taram"
version = "0.0.0"
description = "CommunautÃ© de Notre-Dame-du-Laus"
authors = ["Marc Tardif"]
readme = "README.rst"
repository = "https://github.com/cr3/taram"
packages = [
    { include = "taram" },
]

[tool.poetry.dependencies]
python = "^3.11"
attrs = "^24.3.0"
more-itertools = "^10.5.0"
aiodocker = {version = "^0.24.0", optional = true}
alembic = {version = "^1.14.1", optional = true}
dnspython = {version = "^2.7.0", optional = true}
fastapi = {version = "^0.115.6", optional = true}
ipaddress = {version = "^1.0.23", optional = true}
mysqlclient = {version = "^2.2.7", optional = true}
pip-nftables = {version = "^1.0.2.post1", optional = true}
redis = {version = "^5.2.1", optional = true}
sqlalchemy = {extras = ["asyncio"], version = "^2.0.37", optional = true}
sqlalchemy-utils = {version = "^0.41.2", optional = true}
uvicorn = {version = "^0.34.0", optional = true}

[tool.poetry.extras]
backend = ["alembic", "fastapi", "mysqlclient", "sqlalchemy", "sqlalchemy-utils", "uvicorn"]
dockerapi = ["aiodocker", "fastapi", "uvicorn"]
netfilter = ["dnspython", "ipaddress", "pip-nftables", "redis"]

[tool.poetry.group.test.dependencies]
coverage = "^7.2.3"
dnspython = "^2.7.0"
httpx = "^0.28.1"
pyhamcrest = "^2.1.0"
pytest = "^7.2.2"
pytest-unique = "^0.1.2"
pytest-xdocker = "^0.2.1"
redis = "^5.2.1"
requests = "^2.32.3"

[tool.poetry.group.check]
optional = true

[tool.poetry.group.check.dependencies]
ruff = "^0.0.265"
black = "^23.3.0"
pre-commit = "^3.3.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^6.1.3"
sphinxcontrib-log-cabinet = "^1.0.1"
sphinx-rtd-theme = "^1.2.0"

[tool.poetry.plugins."pytest11"]
taram-db = "taram.testing.db"
taram = "taram.testing.fixtures"

[tool.poetry.plugins."pytest_unique"]
domain = "taram.testing.unique:unique_domain"

[tool.poetry.scripts]
backend = "taram.backend:main"
netfilter = "taram.netfilter:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ["py39"]
preview = true

[tool.ruff]
target-version = "py39"
line-length = 120
fix = true
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # Create your own exception
    "TRY002",
    # Avoid specifying long messages outside the exception class
    "TRY003",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]

# Pytest options:
#   https://docs.pytest.org/en/6.2.x/reference.html#ini-options-ref
[tool.pytest.ini_options]
addopts = [
    "--doctest-modules",
    "--doctest-glob=*.rst",
]
testpaths = [
    "taram",
    "docs",
    "tests",
]

# Coverage options:
#   https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.paths]
source = [
    "taram",
    "*/*/site-packages",
]

[tool.coverage.report]
fail_under = 60
show_missing = true

[tool.coverage.run]
branch = true
parallel = true
source = [
    "taram",
]
